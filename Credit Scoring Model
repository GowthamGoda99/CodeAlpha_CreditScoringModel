{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8nBi+rOsa/gQzeXoVyEqt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GowthamGoda99/CodeAlpha_CreditScoringModel/blob/main/Credit%20Scoring%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "id": "6oHqFYAJqewd",
        "outputId": "5438e92d-52bc-445e-b262-5ef85f2f5908"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Dataset loaded! Shape: (148670, 34)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      ID  year loan_limit             Gender approv_in_adv loan_type  \\\n",
              "0  24890  2019         cf  Sex Not Available         nopre     type1   \n",
              "1  24891  2019         cf               Male         nopre     type2   \n",
              "2  24892  2019         cf               Male           pre     type1   \n",
              "3  24893  2019         cf               Male         nopre     type1   \n",
              "4  24894  2019         cf              Joint           pre     type1   \n",
              "\n",
              "  loan_purpose Credit_Worthiness open_credit business_or_commercial  ...  \\\n",
              "0           p1                l1        nopc                  nob/c  ...   \n",
              "1           p1                l1        nopc                    b/c  ...   \n",
              "2           p1                l1        nopc                  nob/c  ...   \n",
              "3           p4                l1        nopc                  nob/c  ...   \n",
              "4           p1                l1        nopc                  nob/c  ...   \n",
              "\n",
              "   credit_type  Credit_Score  co-applicant_credit_type    age  \\\n",
              "0          EXP           758                       CIB  25-34   \n",
              "1         EQUI           552                       EXP  55-64   \n",
              "2          EXP           834                       CIB  35-44   \n",
              "3          EXP           587                       CIB  45-54   \n",
              "4         CRIF           602                       EXP  25-34   \n",
              "\n",
              "   submission_of_application        LTV Region Security_Type  Status dtir1  \n",
              "0                    to_inst  98.728814  south        direct       1  45.0  \n",
              "1                    to_inst        NaN  North        direct       1   NaN  \n",
              "2                    to_inst  80.019685  south        direct       0  46.0  \n",
              "3                   not_inst  69.376900  North        direct       0  42.0  \n",
              "4                   not_inst  91.886544  North        direct       0  39.0  \n",
              "\n",
              "[5 rows x 34 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7cdea8eb-d8cf-4016-a77f-9c6e86ef4955\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>year</th>\n",
              "      <th>loan_limit</th>\n",
              "      <th>Gender</th>\n",
              "      <th>approv_in_adv</th>\n",
              "      <th>loan_type</th>\n",
              "      <th>loan_purpose</th>\n",
              "      <th>Credit_Worthiness</th>\n",
              "      <th>open_credit</th>\n",
              "      <th>business_or_commercial</th>\n",
              "      <th>...</th>\n",
              "      <th>credit_type</th>\n",
              "      <th>Credit_Score</th>\n",
              "      <th>co-applicant_credit_type</th>\n",
              "      <th>age</th>\n",
              "      <th>submission_of_application</th>\n",
              "      <th>LTV</th>\n",
              "      <th>Region</th>\n",
              "      <th>Security_Type</th>\n",
              "      <th>Status</th>\n",
              "      <th>dtir1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24890</td>\n",
              "      <td>2019</td>\n",
              "      <td>cf</td>\n",
              "      <td>Sex Not Available</td>\n",
              "      <td>nopre</td>\n",
              "      <td>type1</td>\n",
              "      <td>p1</td>\n",
              "      <td>l1</td>\n",
              "      <td>nopc</td>\n",
              "      <td>nob/c</td>\n",
              "      <td>...</td>\n",
              "      <td>EXP</td>\n",
              "      <td>758</td>\n",
              "      <td>CIB</td>\n",
              "      <td>25-34</td>\n",
              "      <td>to_inst</td>\n",
              "      <td>98.728814</td>\n",
              "      <td>south</td>\n",
              "      <td>direct</td>\n",
              "      <td>1</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24891</td>\n",
              "      <td>2019</td>\n",
              "      <td>cf</td>\n",
              "      <td>Male</td>\n",
              "      <td>nopre</td>\n",
              "      <td>type2</td>\n",
              "      <td>p1</td>\n",
              "      <td>l1</td>\n",
              "      <td>nopc</td>\n",
              "      <td>b/c</td>\n",
              "      <td>...</td>\n",
              "      <td>EQUI</td>\n",
              "      <td>552</td>\n",
              "      <td>EXP</td>\n",
              "      <td>55-64</td>\n",
              "      <td>to_inst</td>\n",
              "      <td>NaN</td>\n",
              "      <td>North</td>\n",
              "      <td>direct</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>24892</td>\n",
              "      <td>2019</td>\n",
              "      <td>cf</td>\n",
              "      <td>Male</td>\n",
              "      <td>pre</td>\n",
              "      <td>type1</td>\n",
              "      <td>p1</td>\n",
              "      <td>l1</td>\n",
              "      <td>nopc</td>\n",
              "      <td>nob/c</td>\n",
              "      <td>...</td>\n",
              "      <td>EXP</td>\n",
              "      <td>834</td>\n",
              "      <td>CIB</td>\n",
              "      <td>35-44</td>\n",
              "      <td>to_inst</td>\n",
              "      <td>80.019685</td>\n",
              "      <td>south</td>\n",
              "      <td>direct</td>\n",
              "      <td>0</td>\n",
              "      <td>46.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>24893</td>\n",
              "      <td>2019</td>\n",
              "      <td>cf</td>\n",
              "      <td>Male</td>\n",
              "      <td>nopre</td>\n",
              "      <td>type1</td>\n",
              "      <td>p4</td>\n",
              "      <td>l1</td>\n",
              "      <td>nopc</td>\n",
              "      <td>nob/c</td>\n",
              "      <td>...</td>\n",
              "      <td>EXP</td>\n",
              "      <td>587</td>\n",
              "      <td>CIB</td>\n",
              "      <td>45-54</td>\n",
              "      <td>not_inst</td>\n",
              "      <td>69.376900</td>\n",
              "      <td>North</td>\n",
              "      <td>direct</td>\n",
              "      <td>0</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24894</td>\n",
              "      <td>2019</td>\n",
              "      <td>cf</td>\n",
              "      <td>Joint</td>\n",
              "      <td>pre</td>\n",
              "      <td>type1</td>\n",
              "      <td>p1</td>\n",
              "      <td>l1</td>\n",
              "      <td>nopc</td>\n",
              "      <td>nob/c</td>\n",
              "      <td>...</td>\n",
              "      <td>CRIF</td>\n",
              "      <td>602</td>\n",
              "      <td>EXP</td>\n",
              "      <td>25-34</td>\n",
              "      <td>not_inst</td>\n",
              "      <td>91.886544</td>\n",
              "      <td>North</td>\n",
              "      <td>direct</td>\n",
              "      <td>0</td>\n",
              "      <td>39.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 34 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7cdea8eb-d8cf-4016-a77f-9c6e86ef4955')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7cdea8eb-d8cf-4016-a77f-9c6e86ef4955 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7cdea8eb-d8cf-4016-a77f-9c6e86ef4955');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c56d5666-b2fe-4323-862a-eed749ad1855\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c56d5666-b2fe-4323-862a-eed749ad1855')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c56d5666-b2fe-4323-862a-eed749ad1855 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the uploaded CSV file\n",
        "df = pd.read_csv(\"/content/Loan_Default.csv\")\n",
        "\n",
        "# Show shape and a few rows\n",
        "print(\"✅ Dataset loaded! Shape:\", df.shape)\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display column names to verify target column\n",
        "print(\"📌 Available Columns:\", df.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s1gOnYRZrZBI",
        "outputId": "272fed11-bcff-4a0c-93a2-fc6f650fac78"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📌 Available Columns: ['ID', 'year', 'loan_limit', 'Gender', 'approv_in_adv', 'loan_type', 'loan_purpose', 'Credit_Worthiness', 'open_credit', 'business_or_commercial', 'loan_amount', 'rate_of_interest', 'Interest_rate_spread', 'Upfront_charges', 'term', 'Neg_ammortization', 'interest_only', 'lump_sum_payment', 'property_value', 'construction_type', 'occupancy_type', 'Secured_by', 'total_units', 'income', 'credit_type', 'Credit_Score', 'co-applicant_credit_type', 'age', 'submission_of_application', 'LTV', 'Region', 'Security_Type', 'Status', 'dtir1']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows with missing values\n",
        "df = df.dropna()\n",
        "print(\"🧹 Missing values removed. New shape:\", df.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pumpFRmvrbLQ",
        "outputId": "72fbde92-c120-456a-afd9-1c645f08b40c"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🧹 Missing values removed. New shape: (98187, 34)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Label encode all object-type (string) columns\n",
        "le = LabelEncoder()\n",
        "for col in df.select_dtypes(include='object').columns:\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "print(\"🔁 Categorical columns encoded.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7fUar_XhrdYo",
        "outputId": "ad702843-15cb-4fc1-ca65-2c5226a746ed"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔁 Categorical columns encoded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Clean column names: lowercase and replace spaces with underscores\n",
        "df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n",
        "print(\"🧾 Cleaned Column Names:\", df.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "24COuID0rffS",
        "outputId": "7d6aaa8c-1cd5-473e-9722-cdb75157b5fc"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🧾 Cleaned Column Names: ['id', 'year', 'loan_limit', 'gender', 'approv_in_adv', 'loan_type', 'loan_purpose', 'credit_worthiness', 'open_credit', 'business_or_commercial', 'loan_amount', 'rate_of_interest', 'interest_rate_spread', 'upfront_charges', 'term', 'neg_ammortization', 'interest_only', 'lump_sum_payment', 'property_value', 'construction_type', 'occupancy_type', 'secured_by', 'total_units', 'income', 'credit_type', 'credit_score', 'co-applicant_credit_type', 'age', 'submission_of_application', 'ltv', 'region', 'security_type', 'status', 'dtir1']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the correct name of your target column\n",
        "target_column = \"status\"  # ← 'status' is the column we will predict\n",
        "\n",
        "# Ensure the column exists\n",
        "if target_column not in df.columns:\n",
        "    raise ValueError(f\"❌ Target column '{target_column}' not found in the dataset!\")\n",
        "\n",
        "# Split features and target\n",
        "X = df.drop(target_column, axis=1)\n",
        "y = df[target_column]\n"
      ],
      "metadata": {
        "id": "a_o6cAX5rhgA"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "print(\"📊 Features scaled.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QMGwI0zFrjtz",
        "outputId": "ead60678-c2b2-4a88-f864-1f00d2f9f9c3"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Features scaled.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "print(\"📦 Data split complete.\")\n",
        "print(\"Train shape:\", X_train.shape, \"Test shape:\", X_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DqcSZrANrmXb",
        "outputId": "53c7c3e5-8ce0-4720-c9e9-1254758aca76"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📦 Data split complete.\n",
            "Train shape: (78549, 33) Test shape: (19638, 33)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Only try y_proba if there are 2 classes\n",
        "if len(model.classes_) > 1:\n",
        "    y_proba = model.predict_proba(X_test)[:, 1]\n",
        "else:\n",
        "    y_proba = [0] * len(X_test)\n",
        "\n",
        "print(\"🌲 Model training complete.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vH8k31aSrogM",
        "outputId": "dc0fa08d-f338-450a-92d4-8659d3057c6d"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🌲 Model training complete.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import (\n",
        "    accuracy_score, precision_score, recall_score,\n",
        "    f1_score, roc_auc_score, classification_report, confusion_matrix\n",
        ")\n",
        "\n",
        "print(\"📊 Evaluation Metrics:\")\n",
        "print(\"Accuracy      :\", accuracy_score(y_test, y_pred))\n",
        "print(\"Precision     :\", precision_score(y_test, y_pred))\n",
        "print(\"Recall        :\", recall_score(y_test, y_pred))\n",
        "print(\"F1 Score      :\", f1_score(y_test, y_pred))\n",
        "print(\"ROC-AUC Score :\", roc_auc_score(y_test, y_proba))\n",
        "\n",
        "print(\"\\n📄 Classification Report:\\n\", classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LdgYx8povRLW",
        "outputId": "57cbce5f-48a0-4100-871e-68c2d2c3e182"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Evaluation Metrics:\n",
            "Accuracy      : 1.0\n",
            "Precision     : 0.0\n",
            "Recall        : 0.0\n",
            "F1 Score      : 0.0\n",
            "ROC-AUC Score : nan\n",
            "\n",
            "📄 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     19638\n",
            "\n",
            "    accuracy                           1.00     19638\n",
            "   macro avg       1.00      1.00      1.00     19638\n",
            "weighted avg       1.00      1.00      1.00     19638\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 due to no true nor predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_ranking.py:379: UndefinedMetricWarning: Only one class is present in y_true. ROC AUC score is not defined in that case.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"🔷 Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "90kQqN-UvTU3",
        "outputId": "f772655d-e31f-4609-d383-83ed1c841a86"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:407: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128311 (\\N{LARGE BLUE DIAMOND}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve\n",
        "\n",
        "fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
        "plt.figure(figsize=(6, 4))\n",
        "plt.plot(fpr, tpr, color='darkorange', label=f\"AUC = {roc_auc_score(y_test, y_proba):.2f}\")\n",
        "plt.plot([0, 1], [0, 1], linestyle='--', color='navy')\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title(\"🔷 ROC Curve\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "xGCZ4kFAvUsU",
        "outputId": "24a43774-7190-4f75-ed36-01f525afbd36"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_ranking.py:1188: UndefinedMetricWarning: No positive samples in y_true, true positive value should be meaningless\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_ranking.py:379: UndefinedMetricWarning: Only one class is present in y_true. ROC AUC score is not defined in that case.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128311 (\\N{LARGE BLUE DIAMOND}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Get feature names and importances\n",
        "feature_names = df.drop(target_column, axis=1).columns\n",
        "importances = model.feature_importances_\n",
        "indices = np.argsort(importances)[::-1]\n",
        "\n",
        "# Set up plot\n",
        "plt.figure(figsize=(10, 5))\n",
        "\n",
        "# Check if the model learned anything\n",
        "if importances.sum() == 0:\n",
        "    # Plot empty chart\n",
        "    plt.barh([], [])\n",
        "    plt.title(\"🔷 Feature Importance\")\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Feature\")\n",
        "    plt.text(0.5, 0.5, \"⚠️ No feature importance assigned by the model.\",\n",
        "             ha='center', va='center', fontsize=12, color='red', transform=plt.gca().transAxes)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    # Plot real importances\n",
        "    sns.barplot(x=importances[indices], y=feature_names[indices])\n",
        "    plt.title(\"🔷 Feature Importance\")\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Feature\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "oPRXrd3NvWmI",
        "outputId": "19108db1-39eb-4bb3-8a03-bf1860a95068"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-54-3561200766.py:22: UserWarning: Glyph 128311 (\\N{LARGE BLUE DIAMOND}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128311 (\\N{LARGE BLUE DIAMOND}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}